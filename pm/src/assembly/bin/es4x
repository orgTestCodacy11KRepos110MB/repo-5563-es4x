#!/usr/bin/env bash
(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix

# fight simlinks and avoid readlink -f which doesn't exist on Darwin and Solaris
pushd . > /dev/null
basedir="${BASH_SOURCE[0]}";
while([ -h "$basedir" ]); do
    cd "`dirname "$basedir"`"
    basedir="$(readlink "`basename "$basedir"`")";
done
cd "`dirname "$basedir"`" > /dev/null
basedir="`pwd`";
popd  > /dev/null

case `uname` in
    *CYGWIN*) basedir=`cygpath -w "$basedir"`;;
esac

if ! [[ -t 1 ]]; then
  TTY_OPTS=-DnoTTY=true
fi

# Attempt to use JAVA_HOME
if [ -z ${JAVA_HOME+x} ]; then
  JAVA_EXE=java
else
  JAVA_EXE="$JAVA_HOME/bin/java"
  if ! [[ -x "$JAVA_EXE" ]]; then
    JAVA_EXE=java
  fi
fi

if [ ! -f "node_modules/es4x_install_successful" ]; then
  "$JAVA_EXE" $JAVA_OPTS -Dsilent-install -jar "$basedir/../es4x-pm-${project.version}.jar" "$@"
  EXIT_STATUS=$?
  if [[ "$EXIT_STATUS" -ne "0" ]]; then
    exit $EXIT_STATUS
  fi
fi

# Use JVMCI if installed
if [[ -d "node_modules/.jvmci" ]]; then
  JVMCI="--module-path=node_modules/.jvmci -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI --upgrade-module-path=node_modules/.jvmci/compiler.jar"
fi

# If exists security.policy start the VM in secure mode
if [[ -f "security.policy" ]]; then
  SECURITY_MANAGER="-Djava.security.manager -Djava.security.policy=security.policy"
fi

# If exists logging.properties start JUL using it
if [[ -f "logging.properties" ]]; then
  LOGGING_PROPERTIES="-Djava.util.logging.config.file=logging.properties"
fi

if [[ -f "node_modules/.bin/es4x-launcher.jar" ]]; then
  exec "$JAVA_EXE" -XX:+IgnoreUnrecognizedVMOptions $JVMCI $SECURITY_MANAGER $LOGGING_PROPERTIES $JAVA_OPTS $TTY_OPTS -cp "node_modules/.bin/es4x-launcher.jar:$basedir/../es4x-pm-${project.version}.jar" io.reactiverse.es4x.ES4X "$@"
else
  echo "Missing node_modules/.bin/es4x-launcher.jar" >&2
  exit 3
fi
